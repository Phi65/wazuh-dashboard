"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReportsDashboardsPlugin = void 0;

var _configSchema = require("@osd/config-schema");

var _opensearchReportsPlugin = _interopRequireDefault(require("./backend/opensearch-reports-plugin"));

var _notificationsPlugin = require("./clusters/notificationsPlugin");

var _config = require("./config");

var _routes = _interopRequireDefault(require("./routes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ReportsDashboardsPlugin {
  constructor(context) {
    _defineProperty(this, "logger", void 0);

    _defineProperty(this, "initializerContext", void 0);

    _defineProperty(this, "reportingConfig", void 0);

    this.logger = context.logger.get();
    this.initializerContext = context;
  }

  async setup(core) {
    this.logger.debug('reports-dashboards: Setup');
    core.uiSettings.register({
      'reporting:useOcr': {
        name: 'Reporting use OCR on PDF',
        value: false,
        description: 'Whether to run optical character recognition on PDF reports to make text selectable',
        schema: _configSchema.schema.boolean()
      },
      'reporting:useFOR': {
        name: 'Reporting use ForeignObject rendering',
        value: true,
        description: 'Whether to use ForeignObject rendering when generating reports. If it causes issues, try disabling this option.',
        schema: _configSchema.schema.boolean()
      }
    });

    try {
      const config = await (0, _config.buildConfig)(this.initializerContext, core, this.logger);
      this.reportingConfig = config;
      this.logger.debug('Setup complete');
    } catch (error) {
      this.logger.error(`Error in Reporting setup, reporting may not function properly`);
      this.logger.error(error);
    }

    if (!this.reportingConfig) {
      throw new Error('Reporting Config is not initialized');
    }

    const router = core.http.createRouter(); // Deprecated API. Switch to the new opensearch client as soon as https://github.com/elastic/kibana/issues/35508 done.

    const opensearchReportsClient = core.opensearch.legacy.createClient('opensearch_reports', {
      plugins: [_opensearchReportsPlugin.default, _notificationsPlugin.NotificationsPlugin]
    });
    const notificationsClient = core.opensearch.legacy.createClient('opensearch_notifications', {
      plugins: [_notificationsPlugin.NotificationsPlugin]
    }); // Register server side APIs

    (0, _routes.default)(router, this.reportingConfig); // put logger into route handler context, so that we don't need to pass through parameters

    core.http.registerRouteHandlerContext( //@ts-ignore
    'reporting_plugin', (context, request) => {
      return {
        logger: this.logger,
        opensearchReportsClient,
        notificationsClient
      };
    });
    return {};
  }

  start(core) {
    this.logger.debug('reports-dashboards: Started');
    return {};
  }

  stop() {}

}

exports.ReportsDashboardsPlugin = ReportsDashboardsPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,