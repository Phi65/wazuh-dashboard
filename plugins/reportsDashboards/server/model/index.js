"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.visualReportSchema = exports.triggerSchema = exports.scheduleSchema = exports.reportSchema = exports.reportParamsSchema = exports.reportDefinitionSchema = exports.opensearchDashboardsUserSchema = exports.intervalSchema = exports.deliverySchema = exports.dataReportSchema = exports.cronSchema = exports.channelSchema = void 0;

var _configSchema = require("@osd/config-schema");

var _validationHelper = require("../utils/validationHelper");

var _cronValidator = require("cron-validator");

var _constants = require("../routes/utils/constants");

/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */
const dataReportSchema = _configSchema.schema.object({
  // Need this to build the links in email
  origin: _configSchema.schema.uri(),
  //e.g. https://xxxxx.com
  base_url: _configSchema.schema.string({
    validate(value) {
      if (!(0, _validationHelper.isValidRelativeUrl)(value)) {
        return `invalid relative url: ${value}`;
      }
    },

    minLength: 1
  }),
  saved_search_id: _configSchema.schema.string(),
  //ISO duration format. 'PT10M' means 10 min
  time_duration: _configSchema.schema.string({
    validate(value) {
      if (!_validationHelper.regexDuration.test(value)) {
        return `invalid time duration: ${value}`;
      }
    }

  }),
  //TODO: future support schema.literal('xlsx')
  report_format: _configSchema.schema.oneOf([_configSchema.schema.literal(_constants.FORMAT.csv)]),
  limit: _configSchema.schema.number({
    defaultValue: _constants.DEFAULT_MAX_SIZE,
    min: 0
  }),
  excel: _configSchema.schema.boolean({
    defaultValue: true
  })
});

exports.dataReportSchema = dataReportSchema;

const visualReportSchema = _configSchema.schema.object({
  // Need this to build the links in email
  origin: _configSchema.schema.uri(),
  //e.g. https://xxxxx.com
  base_url: _configSchema.schema.string({
    validate(value) {
      if (!(0, _validationHelper.isValidRelativeUrl)(value)) {
        return `invalid relative url: ${value}`;
      }
    },

    minLength: 1
  }),
  window_width: _configSchema.schema.number({
    defaultValue: 1600,
    min: 0
  }),
  window_height: _configSchema.schema.number({
    defaultValue: 800,
    min: 0
  }),
  report_format: _configSchema.schema.oneOf([_configSchema.schema.literal(_constants.FORMAT.pdf), _configSchema.schema.literal(_constants.FORMAT.png)]),
  header: _configSchema.schema.maybe(_configSchema.schema.string()),
  footer: _configSchema.schema.maybe(_configSchema.schema.string()),
  time_duration: _configSchema.schema.string({
    validate(value) {
      if (!_validationHelper.regexDuration.test(value)) {
        return `invalid time duration: ${value}`;
      }
    }

  })
});

exports.visualReportSchema = visualReportSchema;

const intervalSchema = _configSchema.schema.object({
  interval: _configSchema.schema.object({
    period: _configSchema.schema.number({
      min: 0
    }),
    // Refer to job scheduler SPI https://github.com/opensearch-project/job-scheduler/blob/main/spi/src/main/java/org/opensearch/jobscheduler/spi/schedule/IntervalSchedule.java
    unit: _configSchema.schema.oneOf([_configSchema.schema.literal('MINUTES'), _configSchema.schema.literal('HOURS'), _configSchema.schema.literal('DAYS'), // Job scheduler in reporting OpenSearch plugin always saves as following format
    _configSchema.schema.literal('Minutes'), _configSchema.schema.literal('Hours'), _configSchema.schema.literal('Days')]),
    // timestamp
    start_time: _configSchema.schema.number()
  })
});

exports.intervalSchema = intervalSchema;

const cronSchema = _configSchema.schema.object({
  cron: _configSchema.schema.object({
    expression: _configSchema.schema.string({
      validate(value) {
        if (!(0, _cronValidator.isValidCron)(value)) {
          return `invalid cron expression: ${value}`;
        }
      }

    }),
    //TODO: add more validation once we add full support of timezone
    timezone: _configSchema.schema.string()
  })
});

exports.cronSchema = cronSchema;

const scheduleSchema = _configSchema.schema.object({
  schedule_type: _configSchema.schema.oneOf([
  /*
  TODO: Future Date option will be added in the future.
  Currently @osd/config-schema has no support for more than 2 conditions, keep an eye on library update
  */
  _configSchema.schema.literal(_constants.SCHEDULE_TYPE.recurring), _configSchema.schema.literal(_constants.SCHEDULE_TYPE.cron)]),
  schedule: _configSchema.schema.conditional(_configSchema.schema.siblingRef('schedule_type'), _constants.SCHEDULE_TYPE.recurring, intervalSchema, cronSchema),
  enabled_time: _configSchema.schema.number(),
  enabled: _configSchema.schema.boolean()
});

exports.scheduleSchema = scheduleSchema;

const opensearchDashboardsUserSchema = _configSchema.schema.object({
  opensearch_dashboards_recipients: _configSchema.schema.arrayOf(_configSchema.schema.string())
});

exports.opensearchDashboardsUserSchema = opensearchDashboardsUserSchema;

const channelSchema = _configSchema.schema.object({
  recipients: _configSchema.schema.arrayOf(_configSchema.schema.string({
    validate(value) {
      if (!_validationHelper.regexEmailAddress.test(value)) {
        return `invalid email address ${value}`;
      }
    }

  }), {
    minSize: 1
  }),
  title: _configSchema.schema.string(),
  textDescription: _configSchema.schema.string(),
  htmlDescription: _configSchema.schema.maybe(_configSchema.schema.string()),
  configIds: _configSchema.schema.maybe(_configSchema.schema.arrayOf(_configSchema.schema.string()))
});

exports.channelSchema = channelSchema;

const triggerSchema = _configSchema.schema.object({
  trigger_type: _configSchema.schema.oneOf([
  /*
    TODO: Alerting will be added in the future.
    Currently @osd/config-schema has no support for more than 2 conditions, keep an eye on library update
  */
  _configSchema.schema.literal(_constants.TRIGGER_TYPE.schedule), _configSchema.schema.literal(_constants.TRIGGER_TYPE.onDemand)]),
  trigger_params: _configSchema.schema.conditional(_configSchema.schema.siblingRef('trigger_type'), _constants.TRIGGER_TYPE.onDemand, _configSchema.schema.never(), scheduleSchema)
});

exports.triggerSchema = triggerSchema;

const deliverySchema = _configSchema.schema.object({
  configIds: _configSchema.schema.arrayOf(_configSchema.schema.string()),
  title: _configSchema.schema.string(),
  textDescription: _configSchema.schema.string(),
  htmlDescription: _configSchema.schema.string()
});

exports.deliverySchema = deliverySchema;

const reportParamsSchema = _configSchema.schema.object({
  report_name: _configSchema.schema.string({
    validate(value) {
      if (!_validationHelper.regexReportName.test(value)) {
        return `invald report name ${value}.\nMust be non-empty, allow a-z, A-Z, 0-9, (), [], ',' - and _ and spaces`;
      }
    }

  }),
  report_source: _configSchema.schema.oneOf([_configSchema.schema.literal(_constants.REPORT_TYPE.dashboard), _configSchema.schema.literal(_constants.REPORT_TYPE.visualization), _configSchema.schema.literal(_constants.REPORT_TYPE.savedSearch), _configSchema.schema.literal(_constants.REPORT_TYPE.notebook)]),
  description: _configSchema.schema.string(),
  core_params: _configSchema.schema.conditional(_configSchema.schema.siblingRef('report_source'), _constants.REPORT_TYPE.savedSearch, dataReportSchema, visualReportSchema)
});

exports.reportParamsSchema = reportParamsSchema;

const reportDefinitionSchema = _configSchema.schema.object({
  report_params: reportParamsSchema,
  delivery: deliverySchema,
  trigger: triggerSchema,
  time_created: _configSchema.schema.maybe(_configSchema.schema.number()),
  last_updated: _configSchema.schema.maybe(_configSchema.schema.number()),
  status: _configSchema.schema.maybe(_configSchema.schema.oneOf([_configSchema.schema.literal(_constants.REPORT_DEFINITION_STATUS.active), _configSchema.schema.literal(_constants.REPORT_DEFINITION_STATUS.disabled)]))
});

exports.reportDefinitionSchema = reportDefinitionSchema;

const reportSchema = _configSchema.schema.object({
  query_url: _configSchema.schema.string({
    validate(value) {
      if (!(0, _validationHelper.isValidRelativeUrl)(value)) {
        return `invalid relative url: ${value}`;
      }
    },

    minLength: 1
  }),
  time_from: _configSchema.schema.number(),
  time_to: _configSchema.schema.number(),
  report_definition: reportDefinitionSchema,
  time_created: _configSchema.schema.maybe(_configSchema.schema.number()),
  last_updated: _configSchema.schema.maybe(_configSchema.schema.number()),
  state: _configSchema.schema.maybe(_configSchema.schema.oneOf([_configSchema.schema.literal(_constants.REPORT_STATE.created), _configSchema.schema.literal(_constants.REPORT_STATE.error), _configSchema.schema.literal(_constants.REPORT_STATE.pending), _configSchema.schema.literal(_constants.REPORT_STATE.shared)]))
});

exports.reportSchema = reportSchema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,