"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSavedSearchReport = createSavedSearchReport;

var _dataReportHelpers = require("./dataReportHelpers");

var _helpers = require("./helpers");

/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Specify how long scroll context should be maintained for scrolled search
 */
const scrollTimeout = '1m';

async function createSavedSearchReport(report, client, dateFormat, csvSeparator, allowLeadingWildcards, isScheduledTask = true, logger) {
  const params = report.report_definition.report_params;
  const reportFormat = params.core_params.report_format;
  const reportName = params.report_name;
  await populateMetaData(client, report, isScheduledTask, logger);
  const data = await generateReportData(client, params.core_params, dateFormat, csvSeparator, allowLeadingWildcards, isScheduledTask, logger);
  const curTime = new Date();
  const timeCreated = curTime.valueOf();
  const fileName = (0, _helpers.getFileName)(reportName, curTime) + '.' + reportFormat;
  return {
    timeCreated,
    dataUrl: data,
    fileName
  };
}
/**
 * Populate parameters and saved search info related to meta data object.
 * @param client  OpenSearch client
 * @param report  Report input
 */


async function populateMetaData(client, report, isScheduledTask, logger) {
  _dataReportHelpers.metaData.saved_search_id = report.report_definition.report_params.core_params.saved_search_id;
  _dataReportHelpers.metaData.report_format = report.report_definition.report_params.core_params.report_format;
  _dataReportHelpers.metaData.start = report.time_from;
  _dataReportHelpers.metaData.end = report.time_to; // Get saved search info

  let resIndexPattern = {};
  const ssParams = {
    index: '.kibana',
    id: 'search:' + _dataReportHelpers.metaData.saved_search_id
  };
  const ssInfos = await (0, _helpers.callCluster)(client, 'get', ssParams, isScheduledTask);
  _dataReportHelpers.metaData.sorting = ssInfos._source.search.sort;
  _dataReportHelpers.metaData.type = ssInfos._source.type;
  _dataReportHelpers.metaData.searchSourceJSON = ssInfos._source.search.kibanaSavedObjectMeta.searchSourceJSON; // Get the list of selected columns in the saved search.Otherwise select all the fields under the _source

  await (0, _dataReportHelpers.getSelectedFields)(ssInfos._source.search.columns); // Get index name

  for (const item of ssInfos._source.references) {
    if (item.name === JSON.parse(_dataReportHelpers.metaData.searchSourceJSON).indexRefName) {
      // Get index-pattern information
      const indexPattern = await (0, _helpers.callCluster)(client, 'get', {
        index: '.kibana',
        id: 'index-pattern:' + item.id
      }, isScheduledTask);
      resIndexPattern = indexPattern._source['index-pattern'];
      _dataReportHelpers.metaData.paternName = resIndexPattern.title;
      _dataReportHelpers.metaData.timeFieldName = resIndexPattern.timeFieldName, _dataReportHelpers.metaData.fields = resIndexPattern.fields; // Get all fields
      // Getting fields of type Date

      const dateFields = [];

      for (const item of JSON.parse(_dataReportHelpers.metaData.fields)) {
        if (item.type === 'date') {
          dateFields.push(item.name);
        }
      }

      _dataReportHelpers.metaData.dateFields = dateFields;
    }
  }
}
/**
 * Generate CSV data by query and convert OpenSearch data set.
 * @param client  OpenSearch client
 * @param limit   limit size of result data set
 */


async function generateReportData(client, params, dateFormat, csvSeparator, allowLeadingWildcards, isScheduledTask, logger) {
  let opensearchData = {};
  const arrayHits = [];
  const report = {
    _source: _dataReportHelpers.metaData
  };
  const indexPattern = report._source.paternName;
  const maxResultSize = await getMaxResultSize();
  const opensearchCount = await getOpenSearchDataSize();
  const total = Math.min(opensearchCount.count, params.limit);

  if (total === 0) {
    return '';
  }

  const reqBody = (0, _dataReportHelpers.buildRequestBody)(report, allowLeadingWildcards, 0);
  logger.info(`[Reporting csv module] DSL request body: ${JSON.stringify(reqBody)}`);

  if (total > maxResultSize) {
    await getOpenSearchDataByScroll();
  } else {
    await getOpenSearchDataBySearch();
  }

  return convertOpenSearchDataToCsv(); // Fetch OpenSearch query max size windows to decide search or scroll

  async function getMaxResultSize() {
    const settings = await (0, _helpers.callCluster)(client, 'indices.getSettings', {
      index: indexPattern,
      includeDefaults: true
    }, isScheduledTask);
    let maxResultSize = Number.MAX_SAFE_INTEGER;

    for (let indexName in settings) {
      // The location of max result window differs if default overridden.
      maxResultSize = Math.min(maxResultSize, settings[indexName].settings.index.max_result_window || settings[indexName].defaults.index.max_result_window);
    }

    return maxResultSize;
  } // Build the OpenSearch Count query to count the size of result


  async function getOpenSearchDataSize() {
    const countReq = (0, _dataReportHelpers.buildRequestBody)(report, allowLeadingWildcards, 1);
    return await (0, _helpers.callCluster)(client, 'count', {
      index: indexPattern,
      body: countReq
    }, isScheduledTask);
  }

  async function getOpenSearchDataByScroll() {
    const searchParams = {
      index: report._source.paternName,
      scroll: scrollTimeout,
      body: reqBody,
      size: maxResultSize
    }; // Open scroll context by fetching first batch

    opensearchData = await (0, _helpers.callCluster)(client, 'search', searchParams, isScheduledTask);
    arrayHits.push(opensearchData.hits); // Start scrolling till the end

    const nbScroll = Math.floor(total / maxResultSize);

    for (let i = 0; i < nbScroll; i++) {
      const resScroll = await (0, _helpers.callCluster)(client, 'scroll', {
        scrollId: opensearchData._scroll_id,
        scroll: scrollTimeout
      }, isScheduledTask);

      if (Object.keys(resScroll.hits.hits).length > 0) {
        arrayHits.push(resScroll.hits);
      }
    } // Clear scroll context


    await (0, _helpers.callCluster)(client, 'clearScroll', {
      scrollId: opensearchData._scroll_id
    }, isScheduledTask);
  }

  async function getOpenSearchDataBySearch() {
    const searchParams = {
      index: report._source.paternName,
      body: reqBody,
      size: total
    };
    opensearchData = await (0, _helpers.callCluster)(client, 'search', searchParams, isScheduledTask);
    arrayHits.push(opensearchData.hits);
  } // Parse OpenSearch data and convert to CSV


  async function convertOpenSearchDataToCsv() {
    const dataset = [];
    dataset.push((0, _dataReportHelpers.getOpenSearchData)(arrayHits, report, params, dateFormat));
    return await (0, _dataReportHelpers.convertToCSV)(dataset, csvSeparator);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,