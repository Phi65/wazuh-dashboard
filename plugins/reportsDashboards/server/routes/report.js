"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _configSchema = require("@osd/config-schema");

var _common = require("../../common");

var _createReport = require("./lib/createReport");

var _helpers = require("./utils/helpers");

var _constants = require("./utils/constants");

var _backendToUi = require("./utils/converters/backendToUi");

var _metricHelper = require("./utils/metricHelper");

var _validationHelper = require("../../server/utils/validationHelper");

/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */
function _default(router, config) {
  const protocol = config.get('osd_server', 'protocol');
  const hostname = config.get('osd_server', 'hostname');
  const port = config.get('osd_server', 'port');
  const basePath = config.osdConfig.get('server', 'basePath'); // generate report (with provided metadata)

  router.post({
    path: `${_common.API_PREFIX}/generateReport`,
    validate: {
      body: _configSchema.schema.any(),
      query: _configSchema.schema.object({
        timezone: _configSchema.schema.maybe(_configSchema.schema.string()),
        dateFormat: _configSchema.schema.maybe(_configSchema.schema.string()),
        csvSeparator: _configSchema.schema.maybe(_configSchema.schema.string()),
        allowLeadingWildcards: _configSchema.schema.maybe(_configSchema.schema.string())
      })
    }
  }, async (context, request, response) => {
    (0, _metricHelper.addToMetric)('report', 'create', 'count'); //@ts-ignore

    const logger = context.reporting_plugin.logger;
    let report = request.body; // input validation

    try {
      report.report_definition.report_params.core_params.origin = `${protocol}://${hostname}:${port}${basePath}`;
      report = await (0, _validationHelper.validateReport)(context.core.opensearch.legacy.client, report, basePath);
    } catch (error) {
      logger.error(`Failed input validation for create report ${error}`);
      (0, _metricHelper.addToMetric)('report', 'create', 'user_error');
      return response.badRequest({
        body: error
      });
    }

    try {
      const reportData = await (0, _createReport.createReport)(request, context, report, config); // if not deliver to user himself , no need to send actual file data to client

      const delivery = report.report_definition.delivery;
      (0, _metricHelper.addToMetric)('report', 'create', 'count', report);
      return response.ok({
        body: {
          data: reportData.dataUrl,
          filename: reportData.fileName,
          reportId: reportData.reportId,
          queryUrl: reportData.queryUrl
        }
      });
    } catch (error) {
      // TODO: better error handling for delivery and stages in generating report, pass logger to deeper level
      logger.error(`Failed to generate report: ${error}`);
      logger.error(error);
      (0, _metricHelper.addToMetric)('report', 'create', (0, _helpers.checkErrorType)(error));
      return (0, _helpers.errorResponse)(response, error);
    }
  }); // generate report from report id

  router.get({
    path: `${_common.API_PREFIX}/generateReport/{reportId}`,
    validate: {
      params: _configSchema.schema.object({
        reportId: _configSchema.schema.string()
      }),
      query: _configSchema.schema.object({
        timezone: _configSchema.schema.string(),
        dateFormat: _configSchema.schema.string(),
        csvSeparator: _configSchema.schema.string(),
        allowLeadingWildcards: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => {
    (0, _metricHelper.addToMetric)('report', 'download', 'count'); //@ts-ignore

    const logger = context.reporting_plugin.logger;

    try {
      const savedReportId = request.params.reportId; // @ts-ignore

      const opensearchReportsClient = context.reporting_plugin.opensearchReportsClient.asScoped(request); // get report

      const opensearchResp = await opensearchReportsClient.callAsCurrentUser('opensearch_reports.getReportById', {
        reportInstanceId: savedReportId
      }); // convert report to use UI model

      const report = (0, _backendToUi.backendToUiReport)(opensearchResp.reportInstance, basePath); // generate report

      const reportData = await (0, _createReport.createReport)(request, context, report, config, savedReportId);
      (0, _metricHelper.addToMetric)('report', 'download', 'count', report);
      return response.ok({
        body: {
          data: reportData.dataUrl,
          filename: reportData.fileName,
          reportId: reportData.reportId,
          queryUrl: reportData.queryUrl
        }
      });
    } catch (error) {
      logger.error(`Failed to generate report by id: ${error}`);
      logger.error(error);
      (0, _metricHelper.addToMetric)('report', 'download', (0, _helpers.checkErrorType)(error));
      return (0, _helpers.errorResponse)(response, error);
    }
  }); // create report from existing report definition

  router.post({
    path: `${_common.API_PREFIX}/generateReport/{reportDefinitionId}`,
    validate: {
      params: _configSchema.schema.object({
        reportDefinitionId: _configSchema.schema.string()
      }),
      query: _configSchema.schema.object({
        timezone: _configSchema.schema.string(),
        dateFormat: _configSchema.schema.string(),
        csvSeparator: _configSchema.schema.string(),
        allowLeadingWildcards: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => {
    (0, _metricHelper.addToMetric)('report', 'create_from_definition', 'count'); //@ts-ignore

    const logger = context.reporting_plugin.logger;
    const reportDefinitionId = request.params.reportDefinitionId;
    let report;

    try {
      // @ts-ignore
      const opensearchReportsClient = context.reporting_plugin.opensearchReportsClient.asScoped(request); // call OpenSearch API to create report from definition

      const opensearchResp = await opensearchReportsClient.callAsCurrentUser('opensearch_reports.createReportFromDefinition', {
        reportDefinitionId: reportDefinitionId,
        body: {
          reportDefinitionId: reportDefinitionId
        }
      });
      const reportId = opensearchResp.reportInstance.id; // convert report to use UI model

      const report = (0, _backendToUi.backendToUiReport)(opensearchResp.reportInstance, basePath); // generate report

      const reportData = await (0, _createReport.createReport)(request, context, report, config, reportId);
      (0, _metricHelper.addToMetric)('report', 'create_from_definition', 'count', report);
      return response.ok({
        body: {
          data: reportData.dataUrl,
          filename: reportData.fileName,
          reportId: reportData.reportId,
          queryUrl: reportData.queryUrl
        }
      });
    } catch (error) {
      logger.error(`Failed to generate report from reportDefinition id ${reportDefinitionId} : ${error}`);
      logger.error(error);
      (0, _metricHelper.addToMetric)('report', 'create_from_definition', (0, _helpers.checkErrorType)(error));
      return (0, _helpers.errorResponse)(response, error);
    }
  }); // get all reports details

  router.get({
    path: `${_common.API_PREFIX}/reports`,
    validate: {
      query: _configSchema.schema.object({
        fromIndex: _configSchema.schema.maybe(_configSchema.schema.number()),
        maxItems: _configSchema.schema.maybe(_configSchema.schema.number())
      })
    }
  }, async (context, request, response) => {
    (0, _metricHelper.addToMetric)('report', 'list', 'count');
    const {
      fromIndex,
      maxItems
    } = request.query;

    try {
      // @ts-ignore
      const opensearchReportsClient = context.reporting_plugin.opensearchReportsClient.asScoped(request);
      const opensearchResp = await opensearchReportsClient.callAsCurrentUser('opensearch_reports.getReports', {
        fromIndex: fromIndex,
        maxItems: maxItems || _constants.DEFAULT_MAX_SIZE
      });
      const reportsList = (0, _backendToUi.backendToUiReportsList)(opensearchResp.reportInstanceList, basePath);
      return response.ok({
        body: {
          data: reportsList
        }
      });
    } catch (error) {
      //@ts-ignore
      context.reporting_plugin.logger.error(`Failed to get reports details: ${error}`);
      (0, _metricHelper.addToMetric)('report', 'list', (0, _helpers.checkErrorType)(error));
      return (0, _helpers.errorResponse)(response, error);
    }
  }); // get single report details by id

  router.get({
    path: `${_common.API_PREFIX}/reports/{reportId}`,
    validate: {
      params: _configSchema.schema.object({
        reportId: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => {
    (0, _metricHelper.addToMetric)('report', 'info', 'count');

    try {
      // @ts-ignore
      const opensearchReportsClient = context.reporting_plugin.opensearchReportsClient.asScoped(request);
      const opensearchResp = await opensearchReportsClient.callAsCurrentUser('opensearch_reports.getReportById', {
        reportInstanceId: request.params.reportId
      });
      const report = (0, _backendToUi.backendToUiReport)(opensearchResp.reportInstance, basePath);
      return response.ok({
        body: report
      });
    } catch (error) {
      //@ts-ignore
      context.reporting_plugin.logger.error(`Failed to get single report details: ${error}`);
      (0, _metricHelper.addToMetric)('report', 'info', (0, _helpers.checkErrorType)(error));
      return (0, _helpers.errorResponse)(response, error);
    }
  });
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,