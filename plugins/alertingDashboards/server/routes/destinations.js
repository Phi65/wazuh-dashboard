"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _configSchema = require("@osd/config-schema");

/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */
function _default(services, router) {
  const {
    destinationsService
  } = services;
  router.get({
    path: '/api/alerting/destinations',
    validate: {
      query: _configSchema.schema.object({
        from: _configSchema.schema.maybe(_configSchema.schema.number()),
        size: _configSchema.schema.maybe(_configSchema.schema.number()),
        search: _configSchema.schema.maybe(_configSchema.schema.string()),
        sortField: _configSchema.schema.maybe(_configSchema.schema.string()),
        sortDirection: _configSchema.schema.maybe(_configSchema.schema.string()),
        type: _configSchema.schema.maybe(_configSchema.schema.string())
      })
    }
  }, destinationsService.getDestinations);
  router.get({
    path: '/api/alerting/destinations/{destinationId}',
    validate: {
      params: _configSchema.schema.object({
        destinationId: _configSchema.schema.string()
      })
    }
  }, destinationsService.getDestination);
  router.post({
    path: '/api/alerting/destinations',
    validate: {
      body: _configSchema.schema.any()
    }
  }, destinationsService.createDestination);
  router.put({
    path: '/api/alerting/destinations/{destinationId}',
    validate: {
      params: _configSchema.schema.object({
        destinationId: _configSchema.schema.string()
      }),
      query: _configSchema.schema.object({
        ifSeqNo: _configSchema.schema.string(),
        ifPrimaryTerm: _configSchema.schema.string()
      }),
      body: _configSchema.schema.any()
    }
  }, destinationsService.updateDestination);
  router.delete({
    path: '/api/alerting/destinations/{destinationId}',
    validate: {
      params: _configSchema.schema.object({
        destinationId: _configSchema.schema.string()
      })
    }
  }, destinationsService.deleteDestination);
  router.get({
    path: '/api/alerting/destinations/email_accounts',
    validate: {
      query: _configSchema.schema.object({
        search: _configSchema.schema.maybe(_configSchema.schema.string()),
        size: _configSchema.schema.number()
      })
    }
  }, destinationsService.getEmailAccounts);
  router.post({
    path: '/api/alerting/destinations/email_accounts',
    validate: {
      body: _configSchema.schema.any()
    }
  }, destinationsService.createEmailAccount);
  router.get({
    path: '/api/alerting/destinations/email_accounts/{id}',
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      })
    }
  }, destinationsService.getEmailAccount);
  router.put({
    path: '/api/alerting/destinations/email_accounts/{id}',
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      }),
      query: _configSchema.schema.object({
        ifSeqNo: _configSchema.schema.number(),
        ifPrimaryTerm: _configSchema.schema.number()
      }),
      body: _configSchema.schema.any()
    }
  }, destinationsService.updateEmailAccount);
  router.delete({
    path: '/api/alerting/destinations/email_accounts/{id}',
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      })
    }
  }, destinationsService.deleteEmailAccount);
  router.get({
    path: '/api/alerting/destinations/email_groups',
    validate: {
      query: _configSchema.schema.object({
        search: _configSchema.schema.maybe(_configSchema.schema.string()),
        size: _configSchema.schema.number()
      })
    }
  }, destinationsService.getEmailGroups);
  router.post({
    path: '/api/alerting/destinations/email_groups',
    validate: {
      body: _configSchema.schema.any()
    }
  }, destinationsService.createEmailGroup);
  router.get({
    path: '/api/alerting/destinations/email_groups/{id}',
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      })
    }
  }, destinationsService.getEmailGroup);
  router.put({
    path: '/api/alerting/destinations/email_groups/{id}',
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      }),
      query: _configSchema.schema.object({
        ifSeqNo: _configSchema.schema.number(),
        ifPrimaryTerm: _configSchema.schema.number()
      }),
      body: _configSchema.schema.any()
    }
  }, destinationsService.updateEmailGroup);
  router.delete({
    path: '/api/alerting/destinations/email_groups/{id}',
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      })
    }
  }, destinationsService.deleteEmailGroup);
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,