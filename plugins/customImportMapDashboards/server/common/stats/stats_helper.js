"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStats = exports.getMapSavedObjects = void 0;

var _common = require("../../../common");

/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */
const getStats = mapsSavedObjects => {
  const totalLayersCountByType = buildLayerTypesCountObject();
  let totalLayersFiltersCount = 0;
  const mapsList = [];
  mapsSavedObjects.saved_objects.forEach(mapRes => {
    var _mapRes$attributes, _mapRes$attributes2;

    const layersCountByType = buildLayerTypesCountObject();
    let layersFiltersCount = 0;
    const layerList = mapRes !== null && mapRes !== void 0 && (_mapRes$attributes = mapRes.attributes) !== null && _mapRes$attributes !== void 0 && _mapRes$attributes.layerList ? JSON.parse(mapRes === null || mapRes === void 0 ? void 0 : (_mapRes$attributes2 = mapRes.attributes) === null || _mapRes$attributes2 === void 0 ? void 0 : _mapRes$attributes2.layerList) : [];
    layerList.forEach(layer => {
      var _layer$source$filters, _layer$source, _layer$source$filters2;

      if (layer.type === _common.DASHBOARDS_MAPS_LAYER_TYPE.CUSTOM_MAP) {
        layersCountByType[layer.source.customType]++;
        totalLayersCountByType[layer.source.customType]++;
      } else {
        layersCountByType[layer.type]++;
        totalLayersCountByType[layer.type]++;
      } // @ts-ignore


      const layerFiltersCount = (_layer$source$filters = (_layer$source = layer.source) === null || _layer$source === void 0 ? void 0 : (_layer$source$filters2 = _layer$source.filters) === null || _layer$source$filters2 === void 0 ? void 0 : _layer$source$filters2.length) !== null && _layer$source$filters !== void 0 ? _layer$source$filters : 0;
      layersFiltersCount += layerFiltersCount;
      totalLayersFiltersCount += layerFiltersCount;
    });
    mapsList.push({
      id: mapRes === null || mapRes === void 0 ? void 0 : mapRes.id,
      layers_filters_total: layersFiltersCount,
      layers_total: { ...layersCountByType
      }
    });
  });
  return {
    maps_total: mapsSavedObjects.total,
    layers_filters_total: totalLayersFiltersCount,
    layers_total: { ...totalLayersCountByType
    },
    maps_list: mapsList
  };
};

exports.getStats = getStats;

const buildLayerTypesCountObject = () => {
  const layersCountByType = {};
  Object.values(_common.DASHBOARDS_MAPS_LAYER_TYPE).forEach(layerType => {
    if (layerType === _common.DASHBOARDS_MAPS_LAYER_TYPE.CUSTOM_MAP) {
      Object.values(_common.DASHBOARDS_CUSTOM_MAPS_LAYER_TYPE).forEach(customLayerType => {
        layersCountByType[customLayerType] = 0;
      });
    } else {
      layersCountByType[layerType] = 0;
    }
  });
  return layersCountByType;
};

const getMapSavedObjects = async (savedObjectsClient, perPage) => {
  const mapsSavedObjects = await (savedObjectsClient === null || savedObjectsClient === void 0 ? void 0 : savedObjectsClient.find({
    type: _common.MAP_SAVED_OBJECT_TYPE,
    perPage
  })); // If there are more than perPage of maps, we need to make additional requests to get all maps.

  if (mapsSavedObjects.total > perPage) {
    const iterations = Math.ceil(mapsSavedObjects.total / perPage);

    for (let i = 1; i < iterations; i++) {
      const mapsSavedObjectsPage = await (savedObjectsClient === null || savedObjectsClient === void 0 ? void 0 : savedObjectsClient.find({
        type: _common.MAP_SAVED_OBJECT_TYPE,
        perPage,
        page: i + 1
      }));
      mapsSavedObjects.saved_objects = [...mapsSavedObjects.saved_objects, ...mapsSavedObjectsPage.saved_objects];
    }
  }

  return mapsSavedObjects;
};

exports.getMapSavedObjects = getMapSavedObjects;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,