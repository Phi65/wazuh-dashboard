"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PolicyService {
  constructor(osDriver) {
    _defineProperty(this, "osDriver", void 0);

    _defineProperty(this, "putPolicy", async (context, request, response) => {
      try {
        const {
          id
        } = request.params;
        const {
          seqNo,
          primaryTerm
        } = request.query;
        let method = "ism.putPolicy";
        let params = {
          policyId: id,
          ifSeqNo: seqNo,
          ifPrimaryTerm: primaryTerm,
          body: JSON.stringify(request.body)
        };

        if (seqNo === undefined || primaryTerm === undefined) {
          method = "ism.createPolicy";
          params = {
            policyId: id,
            body: JSON.stringify(request.body)
          };
        }

        const {
          callAsCurrentUser: callWithRequest
        } = this.osDriver.asScoped(request);
        const putPolicyResponse = await callWithRequest(method, params);
        return response.custom({
          statusCode: 200,
          body: {
            ok: true,
            response: putPolicyResponse
          }
        });
      } catch (err) {
        console.error("Index Management - PolicyService - putPolicy:", err);
        return response.custom({
          statusCode: 200,
          body: {
            ok: false,
            error: err.message
          }
        });
      }
    });

    _defineProperty(this, "deletePolicy", async (context, request, response) => {
      try {
        const {
          id
        } = request.params;
        const params = {
          policyId: id
        };
        const {
          callAsCurrentUser: callWithRequest
        } = this.osDriver.asScoped(request);
        const deletePolicyResponse = await callWithRequest("ism.deletePolicy", params);

        if (deletePolicyResponse.result !== "deleted") {
          return response.custom({
            statusCode: 200,
            body: {
              ok: false,
              error: deletePolicyResponse.result
            }
          });
        }

        return response.custom({
          statusCode: 200,
          body: {
            ok: true,
            response: true
          }
        });
      } catch (err) {
        console.error("Index Management - PolicyService - deletePolicy:", err);
        return response.custom({
          statusCode: 200,
          body: {
            ok: false,
            error: err.message
          }
        });
      }
    });

    _defineProperty(this, "getPolicy", async (context, request, response) => {
      try {
        const {
          id
        } = request.params;
        const params = {
          policyId: id
        };
        const {
          callAsCurrentUser: callWithRequest
        } = this.osDriver.asScoped(request);
        const getResponse = await callWithRequest("ism.getPolicy", params);

        const policy = _lodash.default.get(getResponse, "policy", null);

        const seqNo = _lodash.default.get(getResponse, "_seq_no");

        const primaryTerm = _lodash.default.get(getResponse, "_primary_term");

        if (policy) {
          return response.custom({
            statusCode: 200,
            body: {
              ok: true,
              response: {
                id,
                seqNo: seqNo,
                primaryTerm: primaryTerm,
                policy: policy
              }
            }
          });
        } else {
          return response.custom({
            statusCode: 200,
            body: {
              ok: false,
              error: "Failed to load policy"
            }
          });
        }
      } catch (err) {
        console.error("Index Management - PolicyService - getPolicy:", err);
        return response.custom({
          statusCode: 200,
          body: {
            ok: false,
            error: err.message
          }
        });
      }
    });

    _defineProperty(this, "getPolicies", async (context, request, response) => {
      try {
        const {
          from = 0,
          size = 20,
          search,
          sortDirection = "desc",
          sortField = "id"
        } = request.query;
        const policySorts = {
          id: "policy.policy_id.keyword",
          "policy.policy.description": "policy.description.keyword",
          "policy.policy.last_updated_time": "policy.last_updated_time"
        };
        const params = {
          from,
          size,
          sortOrder: sortDirection,
          sortField: policySorts[sortField] || policySorts.id,
          queryString: search.trim() ? `*${search.trim().split(" ").join("* *")}*` : "*"
        };
        const {
          callAsCurrentUser: callWithRequest
        } = this.osDriver.asScoped(request);
        const getResponse = await callWithRequest("ism.getPolicies", params);
        const policies = getResponse.policies.map(p => ({
          seqNo: p._seq_no,
          primaryTerm: p._primary_term,
          id: p._id,
          policy: p.policy
        }));
        const totalPolicies = getResponse.total_policies;
        return response.custom({
          statusCode: 200,
          body: {
            ok: true,
            response: {
              policies: policies,
              totalPolicies
            }
          }
        });
      } catch (err) {
        if (err.statusCode === 404 && err.body.error.type === "index_not_found_exception") {
          return response.custom({
            statusCode: 200,
            body: {
              ok: true,
              response: {
                policies: [],
                totalPolicies: 0
              }
            }
          });
        }

        console.error("Index Management - PolicyService - getPolicies", err);
        return response.custom({
          statusCode: 200,
          body: {
            ok: false,
            error: err.message
          }
        });
      }
    });

    this.osDriver = osDriver;
  }
  /**
   * Calls backend Put Policy API
   */


}

exports.default = PolicyService;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,