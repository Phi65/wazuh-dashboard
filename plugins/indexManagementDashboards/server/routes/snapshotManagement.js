"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("../../utils/constants");

var _configSchema = require("@osd/config-schema");

/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */
function _default(services, router) {
  const {
    snapshotManagementService
  } = services;
  router.get({
    path: _constants.NODE_API._SNAPSHOTS,
    validate: {}
  }, snapshotManagementService.getAllSnapshotsWithPolicy);
  router.get({
    path: `${_constants.NODE_API._SNAPSHOTS}/{id}`,
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      }),
      query: _configSchema.schema.object({
        repository: _configSchema.schema.string()
      })
    }
  }, snapshotManagementService.getSnapshot);
  router.delete({
    path: `${_constants.NODE_API._SNAPSHOTS}/{id}`,
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      }),
      query: _configSchema.schema.object({
        repository: _configSchema.schema.string()
      })
    }
  }, snapshotManagementService.deleteSnapshot);
  router.put({
    path: `${_constants.NODE_API._SNAPSHOTS}/{id}`,
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      }),
      query: _configSchema.schema.object({
        repository: _configSchema.schema.string()
      }),
      body: _configSchema.schema.any()
    }
  }, snapshotManagementService.createSnapshot);
  router.post({
    path: `${_constants.NODE_API._SNAPSHOTS}/{id}`,
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      }),
      query: _configSchema.schema.object({
        repository: _configSchema.schema.string()
      }),
      body: _configSchema.schema.any()
    }
  }, snapshotManagementService.restoreSnapshot);
  router.post({
    path: `${_constants.NODE_API.SMPolicies}/{id}`,
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      }),
      body: _configSchema.schema.any()
    }
  }, snapshotManagementService.createPolicy);
  router.put({
    path: `${_constants.NODE_API.SMPolicies}/{id}`,
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      }),
      query: _configSchema.schema.object({
        seqNo: _configSchema.schema.maybe(_configSchema.schema.number()),
        primaryTerm: _configSchema.schema.maybe(_configSchema.schema.number())
      }),
      body: _configSchema.schema.any()
    }
  }, snapshotManagementService.updatePolicy);
  router.get({
    path: _constants.NODE_API.SMPolicies,
    validate: {
      // for public service to pass object to server service
      query: _configSchema.schema.object({
        from: _configSchema.schema.number(),
        size: _configSchema.schema.number(),
        sortField: _configSchema.schema.string(),
        sortOrder: _configSchema.schema.string(),
        queryString: _configSchema.schema.string()
      })
    }
  }, snapshotManagementService.getPolicies);
  router.get({
    path: `${_constants.NODE_API.SMPolicies}/{id}`,
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      })
    }
  }, snapshotManagementService.getPolicy);
  router.delete({
    path: `${_constants.NODE_API.SMPolicies}/{id}`,
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      })
    }
  }, snapshotManagementService.deletePolicy);
  router.post({
    path: `${_constants.NODE_API.SMPolicies}/{id}/_start`,
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      })
    }
  }, snapshotManagementService.startPolicy);
  router.post({
    path: `${_constants.NODE_API.SMPolicies}/{id}/_stop`,
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      })
    }
  }, snapshotManagementService.stopPolicy);
  router.get({
    path: _constants.NODE_API._REPOSITORIES,
    validate: {}
  }, snapshotManagementService.catRepositoriesWithSnapshotCount);
  router.get({
    path: `${_constants.NODE_API._INDICES}/{indices}`,
    validate: {
      params: _configSchema.schema.object({
        indices: _configSchema.schema.string()
      })
    }
  }, snapshotManagementService.catSnapshotIndices);
  router.get({
    path: _constants.NODE_API._RECOVERY,
    validate: {}
  }, snapshotManagementService.getIndexRecovery);
  router.delete({
    path: `${_constants.NODE_API._REPOSITORIES}/{id}`,
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      })
    }
  }, snapshotManagementService.deleteRepository);
  router.get({
    path: `${_constants.NODE_API._REPOSITORIES}/{id}`,
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      })
    }
  }, snapshotManagementService.getRepository);
  router.put({
    path: `${_constants.NODE_API._REPOSITORIES}/{id}`,
    validate: {
      params: _configSchema.schema.object({
        id: _configSchema.schema.string()
      }),
      body: _configSchema.schema.any()
    }
  }, snapshotManagementService.createRepository);
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,