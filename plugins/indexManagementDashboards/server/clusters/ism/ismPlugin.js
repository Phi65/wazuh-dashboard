"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ismPlugin;

var _constants = require("../../utils/constants");

/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

/*
    TODO: migrate to types
 * Types are not available until 7.2
 * https://github.com/opensearch-project/OpenSearch-Dashboards/blob/main/src/core/server/opensearch/client/client_config.ts
 * */
function ismPlugin(Client, config, components) {
  const ca = components.clientAction.factory;
  Client.prototype.ism = components.clientAction.namespaceFactory();
  const ism = Client.prototype.ism.prototype;
  ism.getPolicy = ca({
    url: {
      fmt: `${_constants.API.POLICY_BASE}/<%=policyId%>`,
      req: {
        policyId: {
          type: "string",
          required: true
        }
      }
    },
    method: "GET"
  });
  ism.getPolicies = ca({
    url: {
      fmt: `${_constants.API.POLICY_BASE}`
    },
    method: "GET"
  });
  ism.createPolicy = ca({
    url: {
      fmt: `${_constants.API.POLICY_BASE}/<%=policyId%>?refresh=wait_for`,
      req: {
        policyId: {
          type: "string",
          required: true
        }
      }
    },
    needBody: true,
    method: "PUT"
  });
  ism.deletePolicy = ca({
    url: {
      fmt: `${_constants.API.POLICY_BASE}/<%=policyId%>?refresh=wait_for`,
      req: {
        policyId: {
          type: "string",
          required: true
        }
      }
    },
    method: "DELETE"
  });
  ism.putPolicy = ca({
    url: {
      fmt: `${_constants.API.POLICY_BASE}/<%=policyId%>?if_seq_no=<%=ifSeqNo%>&if_primary_term=<%=ifPrimaryTerm%>&refresh=wait_for`,
      req: {
        policyId: {
          type: "string",
          required: true
        },
        ifSeqNo: {
          type: "string",
          required: true
        },
        ifPrimaryTerm: {
          type: "string",
          required: true
        }
      }
    },
    needBody: true,
    method: "PUT"
  });
  ism.explain = ca({
    url: {
      fmt: `${_constants.API.EXPLAIN_BASE}/<%=index%>`,
      req: {
        index: {
          type: "string",
          required: true
        }
      }
    },
    method: "GET"
  });
  ism.explainAll = ca({
    url: {
      fmt: `${_constants.API.EXPLAIN_BASE}`
    },
    method: "GET"
  });
  ism.retry = ca({
    url: {
      fmt: `${_constants.API.RETRY_BASE}/<%=index%>`,
      req: {
        index: {
          type: "string",
          required: true
        }
      }
    },
    needBody: false,
    method: "POST"
  });
  ism.add = ca({
    url: {
      fmt: `${_constants.API.ADD_POLICY_BASE}/<%=index%>`,
      req: {
        index: {
          type: "string",
          required: true
        }
      }
    },
    needBody: true,
    method: "POST"
  });
  ism.remove = ca({
    url: {
      fmt: `${_constants.API.REMOVE_POLICY_BASE}/<%=index%>`,
      req: {
        index: {
          type: "string",
          required: true
        }
      }
    },
    needBody: false,
    method: "POST"
  });
  ism.change = ca({
    url: {
      fmt: `${_constants.API.CHANGE_POLICY_BASE}/<%=index%>`,
      req: {
        index: {
          type: "string",
          required: true
        }
      }
    },
    needBody: true,
    method: "POST"
  }); // TODO add new APIs as they are being implemented: status, stop, start

  ism.getRollup = ca({
    url: {
      fmt: `${_constants.API.ROLLUP_JOBS_BASE}/<%=rollupId%>`,
      req: {
        rollupId: {
          type: "string",
          required: true
        }
      }
    },
    method: "GET"
  });
  ism.getRollups = ca({
    url: {
      fmt: `${_constants.API.ROLLUP_JOBS_BASE}`
    },
    method: "GET"
  });
  ism.createRollup = ca({
    url: {
      fmt: `${_constants.API.ROLLUP_JOBS_BASE}/<%=rollupId%>?refresh=wait_for`,
      req: {
        rollupId: {
          type: "string",
          required: true
        }
      }
    },
    needBody: true,
    method: "PUT"
  });
  ism.deleteRollup = ca({
    url: {
      fmt: `${_constants.API.ROLLUP_JOBS_BASE}/<%=rollupId%>?refresh=wait_for`,
      req: {
        rollupId: {
          type: "string",
          required: true
        }
      }
    },
    method: "DELETE"
  });
  ism.putRollup = ca({
    url: {
      fmt: `${_constants.API.ROLLUP_JOBS_BASE}/<%=rollupId%>`,
      req: {
        rollupId: {
          type: "string",
          required: true
        }
      }
    },
    method: "PUT"
  });
  ism.startRollup = ca({
    url: {
      fmt: `${_constants.API.ROLLUP_JOBS_BASE}/<%=rollupId%>/_start`,
      req: {
        rollupId: {
          type: "string",
          required: true
        }
      }
    },
    method: "POST"
  });
  ism.stopRollup = ca({
    url: {
      fmt: `${_constants.API.ROLLUP_JOBS_BASE}/<%=rollupId%>/_stop`,
      req: {
        rollupId: {
          type: "string",
          required: true
        }
      }
    },
    method: "POST"
  });
  ism.explainRollup = ca({
    url: {
      fmt: `${_constants.API.ROLLUP_JOBS_BASE}/<%=rollupId%>/_explain`,
      req: {
        rollupId: {
          type: "string",
          required: true
        }
      }
    },
    method: "GET"
  });
  ism.getTransform = ca({
    url: {
      fmt: `${_constants.API.TRANSFORM_BASE}/<%=transformId%>`,
      req: {
        transformId: {
          type: "string",
          required: true
        }
      }
    },
    method: "GET"
  });
  ism.getTransforms = ca({
    url: {
      fmt: `${_constants.API.TRANSFORM_BASE}/`
    },
    method: "GET"
  });
  ism.explainTransform = ca({
    url: {
      fmt: `${_constants.API.TRANSFORM_BASE}/<%=transformId%>/_explain`,
      req: {
        transformId: {
          type: "string",
          required: true
        }
      }
    },
    method: "GET"
  });
  ism.startTransform = ca({
    url: {
      fmt: `${_constants.API.TRANSFORM_BASE}/<%=transformId%>/_start`,
      req: {
        transformId: {
          type: "string",
          required: true
        }
      }
    },
    method: "POST"
  });
  ism.stopTransform = ca({
    url: {
      fmt: `${_constants.API.TRANSFORM_BASE}/<%=transformId%>/_stop`,
      req: {
        transformId: {
          type: "string",
          required: true
        }
      }
    },
    method: "POST"
  });
  ism.deleteTransform = ca({
    url: {
      fmt: `${_constants.API.TRANSFORM_BASE}/<%=transformId%>`,
      req: {
        transformId: {
          type: "string",
          required: true
        }
      }
    },
    method: "DELETE"
  });
  ism.createTransform = ca({
    url: {
      fmt: `${_constants.API.TRANSFORM_BASE}/<%=transformId%>?refresh=wait_for`,
      req: {
        transformId: {
          type: "string",
          required: true
        }
      }
    },
    needBody: true,
    method: "PUT"
  });
  ism.putTransform = ca({
    url: {
      fmt: `${_constants.API.TRANSFORM_BASE}/<%=transformId%>`,
      req: {
        transformId: {
          type: "string",
          required: true
        }
      }
    },
    method: "PUT"
  });
  ism.previewTransform = ca({
    url: {
      fmt: `${_constants.API.TRANSFORM_BASE}/_preview`
    },
    needBody: true,
    method: "POST"
  });
  ism.getChannels = ca({
    url: {
      fmt: `${_constants.API.CHANNELS_BASE}`
    },
    method: "GET"
  });
  ism.getChannel = ca({
    url: {
      fmt: `${_constants.API.NOTIFICATION_CONFIGS_BASE}/<%=id%>`,
      req: {
        id: {
          type: "string",
          required: true
        }
      }
    },
    method: "GET"
  });
  ism.getSMPolicy = ca({
    url: {
      fmt: `${_constants.API.SM_POLICY_BASE}/<%=id%>`,
      req: {
        id: {
          type: "string",
          required: true
        }
      }
    },
    method: "GET"
  });
  ism.getSMPolicies = ca({
    url: {
      fmt: `${_constants.API.SM_POLICY_BASE}`
    },
    method: "GET"
  });
  ism.createSMPolicy = ca({
    url: {
      fmt: `${_constants.API.SM_POLICY_BASE}/<%=policyId%>?refresh=wait_for`,
      req: {
        policyId: {
          type: "string",
          required: true
        }
      }
    },
    needBody: true,
    method: "POST"
  });
  ism.updateSMPolicy = ca({
    url: {
      fmt: `${_constants.API.SM_POLICY_BASE}/<%=policyId%>?if_seq_no=<%=ifSeqNo%>&if_primary_term=<%=ifPrimaryTerm%>&refresh=wait_for`,
      req: {
        policyId: {
          type: "string",
          required: true
        },
        ifSeqNo: {
          type: "string",
          required: true
        },
        ifPrimaryTerm: {
          type: "string",
          required: true
        }
      }
    },
    needBody: true,
    method: "PUT"
  });
  ism.deleteSMPolicy = ca({
    url: {
      fmt: `${_constants.API.SM_POLICY_BASE}/<%=policyId%>?refresh=wait_for`,
      req: {
        policyId: {
          type: "string",
          required: true
        }
      }
    },
    method: "DELETE"
  });
  ism.explainSnapshotPolicy = ca({
    url: {
      fmt: `${_constants.API.SM_POLICY_BASE}/<%=id%>/_explain`,
      req: {
        id: {
          type: "string",
          required: true
        }
      }
    },
    method: "GET"
  });
  ism.startSnapshotPolicy = ca({
    url: {
      fmt: `${_constants.API.SM_POLICY_BASE}/<%=id%>/_start`,
      req: {
        id: {
          type: "string",
          required: true
        }
      }
    },
    method: "POST"
  });
  ism.stopSnapshotPolicy = ca({
    url: {
      fmt: `${_constants.API.SM_POLICY_BASE}/<%=id%>/_stop`,
      req: {
        id: {
          type: "string",
          required: true
        }
      }
    },
    method: "POST"
  });
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,