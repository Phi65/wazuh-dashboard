"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SecuritySavedObjectsClientWrapper = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _common = require("../../common");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SecuritySavedObjectsClientWrapper {
  constructor() {
    _defineProperty(this, "httpStart", void 0);

    _defineProperty(this, "config", void 0);

    _defineProperty(this, "wrapperFactory", wrapperOptions => {
      var _state$authInfo;

      const state = this.httpStart.auth.get(wrapperOptions.request).state || {};
      const selectedTenant = state.selectedTenant;
      const username = (_state$authInfo = state.authInfo) === null || _state$authInfo === void 0 ? void 0 : _state$authInfo.user_name;
      const isGlobalEnabled = this.config.multitenancy.tenants.enable_global;
      const isPrivateEnabled = this.config.multitenancy.tenants.enable_private;
      let namespaceValue = selectedTenant;

      const createWithNamespace = async (type, attributes, options) => {
        namespaceValue = this.getNamespaceValue(selectedTenant, isPrivateEnabled, username);

        _lodash.default.assign(options, {
          namespace: [namespaceValue]
        });

        return await wrapperOptions.client.create(type, attributes, options);
      };

      const bulkGetWithNamespace = async (objects = [], options = {}) => {
        namespaceValue = this.getNamespaceValue(selectedTenant, isPrivateEnabled, username);

        _lodash.default.assign(options, {
          namespace: [namespaceValue]
        });

        return await wrapperOptions.client.bulkGet(objects, options);
      };

      const findWithNamespace = async options => {
        var _state$authInfo2;

        const tenants = (_state$authInfo2 = state.authInfo) === null || _state$authInfo2 === void 0 ? void 0 : _state$authInfo2.tenants;
        const availableTenantNames = Object.keys(tenants);
        availableTenantNames.push(_common.DEFAULT_TENANT); // The value of namespace is "default" if saved objects are created when opensearch_security.multitenancy.enable_aggregation_view is set to false. So adding it to find.

        if (isGlobalEnabled) {
          availableTenantNames.push(_common.GLOBAL_TENANT_SYMBOL);
        }

        if (isPrivateEnabled) {
          availableTenantNames.push(_common.PRIVATE_TENANT_SYMBOL + username);
        }

        if (availableTenantNames.includes(_common.globalTenantName)) {
          let index = availableTenantNames.indexOf(_common.globalTenantName);

          if (index > -1) {
            availableTenantNames.splice(index, 1);
          }

          index = availableTenantNames.indexOf(username);

          if (index > -1) {
            availableTenantNames.splice(index, 1);
          }
        }

        if ((0, _common.isPrivateTenant)(selectedTenant)) {
          namespaceValue = selectedTenant + username;
        }

        if (!!options.namespaces) {
          const namespacesToInclude = Array.isArray(options.namespaces) ? options.namespaces : [options.namespaces];
          const typeToNamespacesMap = {};
          const searchTypes = Array.isArray(options.type) ? options.type : [options.type];
          searchTypes.forEach(t => {
            typeToNamespacesMap[t] = namespacesToInclude;
          });

          if (searchTypes.includes('config')) {
            if (namespacesToInclude.includes(namespaceValue)) {
              typeToNamespacesMap.config = [namespaceValue];
            } else {
              delete typeToNamespacesMap.config;
            }
          }

          options.typeToNamespacesMap = new Map(Object.entries(typeToNamespacesMap));
          options.type = '';
          options.namespaces = [];
        } else {
          options.namespaces = [namespaceValue];
        }

        return await wrapperOptions.client.find(options);
      };

      const getWithNamespace = async (type, id, options = {}) => {
        namespaceValue = this.getNamespaceValue(selectedTenant, isPrivateEnabled, username);

        _lodash.default.assign(options, {
          namespace: [namespaceValue]
        });

        return await wrapperOptions.client.get(type, id, options);
      };

      const updateWithNamespace = async (type, id, attributes, options = {}) => {
        namespaceValue = this.getNamespaceValue(selectedTenant, isPrivateEnabled, username);

        _lodash.default.assign(options, {
          namespace: [namespaceValue]
        });

        return await wrapperOptions.client.update(type, id, attributes, options);
      };

      const bulkCreateWithNamespace = async (objects, options) => {
        namespaceValue = this.getNamespaceValue(selectedTenant, isPrivateEnabled, username);

        _lodash.default.assign(options, {
          namespace: [namespaceValue]
        });

        return await wrapperOptions.client.bulkCreate(objects, options);
      };

      const bulkUpdateWithNamespace = async (objects, options) => {
        namespaceValue = this.getNamespaceValue(selectedTenant, isPrivateEnabled, username);

        _lodash.default.assign(options, {
          namespace: [namespaceValue]
        });

        return await wrapperOptions.client.bulkUpdate(objects, options);
      };

      const deleteWithNamespace = async (type, id, options = {}) => {
        namespaceValue = this.getNamespaceValue(selectedTenant, isPrivateEnabled, username);

        _lodash.default.assign(options, {
          namespace: [namespaceValue]
        });

        return await wrapperOptions.client.delete(type, id, options);
      };

      const checkConflictsWithNamespace = async (objects = [], options = {}) => {
        namespaceValue = this.getNamespaceValue(selectedTenant, isPrivateEnabled, username);

        _lodash.default.assign(options, {
          namespace: [namespaceValue]
        });

        return await wrapperOptions.client.checkConflicts(objects, options);
      };

      return { ...wrapperOptions.client,
        get: getWithNamespace,
        update: updateWithNamespace,
        bulkCreate: bulkCreateWithNamespace,
        bulkGet: bulkGetWithNamespace,
        bulkUpdate: bulkUpdateWithNamespace,
        create: createWithNamespace,
        delete: deleteWithNamespace,
        errors: wrapperOptions.client.errors,
        checkConflicts: checkConflictsWithNamespace,
        addToNamespaces: wrapperOptions.client.addToNamespaces,
        find: findWithNamespace,
        deleteFromNamespaces: wrapperOptions.client.deleteFromNamespaces
      };
    });
  }

  isAPrivateTenant(selectedTenant, isPrivateEnabled) {
    return selectedTenant !== undefined && isPrivateEnabled && (0, _common.isPrivateTenant)(selectedTenant);
  }

  getNamespaceValue(selectedTenant, isPrivateEnabled, username) {
    let namespaceValue = selectedTenant;

    if (this.isAPrivateTenant(selectedTenant, isPrivateEnabled)) {
      namespaceValue = selectedTenant + username;
    }

    return namespaceValue;
  }

}

exports.SecuritySavedObjectsClientWrapper = SecuritySavedObjectsClientWrapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,