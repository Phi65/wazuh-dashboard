"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProxyAuthentication = void 0;

var _lodash = require("lodash");

var _routes = require("./routes");

var _authentication_type = require("../authentication_type");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ProxyAuthentication extends _authentication_type.AuthenticationType {
  constructor(config, sessionStorageFactory, router, esClient, coreSetup, logger) {
    var _this$config$proxycac, _this$config$proxycac2, _this$config$proxycac3, _this$config$proxycac4;

    super(config, sessionStorageFactory, router, esClient, coreSetup, logger);

    _defineProperty(this, "type", 'proxy');

    _defineProperty(this, "authType", 'proxycache');

    _defineProperty(this, "userHeaderName", void 0);

    _defineProperty(this, "roleHeaderName", void 0);

    this.userHeaderName = ((_this$config$proxycac = this.config.proxycache) === null || _this$config$proxycac === void 0 ? void 0 : (_this$config$proxycac2 = _this$config$proxycac.user_header) === null || _this$config$proxycac2 === void 0 ? void 0 : _this$config$proxycac2.toLowerCase()) || '';
    this.roleHeaderName = ((_this$config$proxycac3 = this.config.proxycache) === null || _this$config$proxycac3 === void 0 ? void 0 : (_this$config$proxycac4 = _this$config$proxycac3.roles_header) === null || _this$config$proxycac4 === void 0 ? void 0 : _this$config$proxycac4.toLowerCase()) || '';
  }

  async init() {
    const routes = new _routes.ProxyAuthRoutes(this.router, this.config, this.sessionStorageFactory, this.securityClient, this.coreSetup);
    routes.setupRoutes();
  }

  requestIncludesAuthInfo(request) {
    return request.headers[ProxyAuthentication.XFF] && request.headers[this.userHeaderName] ? true : false;
  }

  async getAdditionalAuthHeader(request) {
    var _this$config$proxycac5, _this$config$proxycac6;

    const authHeaders = {};
    const customProxyHeader = (_this$config$proxycac5 = this.config.proxycache) === null || _this$config$proxycac5 === void 0 ? void 0 : _this$config$proxycac5.proxy_header;

    if (customProxyHeader && !request.headers[customProxyHeader] && (_this$config$proxycac6 = this.config.proxycache) !== null && _this$config$proxycac6 !== void 0 && _this$config$proxycac6.proxy_header_ip) {
      // TODO: check how to get remoteIp from OpenSearchDashboardsRequest and add remoteIp to this header
      authHeaders[customProxyHeader] = this.config.proxycache.proxy_header_ip;
    }

    return authHeaders;
  }

  getCookie(request, authInfo) {
    const cookie = {
      username: authInfo.username,
      credentials: {},
      authType: this.authType,
      isAnonymousAuth: false,
      expiryTime: Date.now() + this.config.session.ttl
    };

    if (this.userHeaderName && request.headers[this.userHeaderName]) {
      cookie.credentials[this.userHeaderName] = request.headers[this.userHeaderName];
    }

    if (this.roleHeaderName && request.headers[this.roleHeaderName]) {
      cookie.credentials[this.roleHeaderName] = request.headers[this.roleHeaderName];
    }

    if (request.headers[ProxyAuthentication.XFF]) {
      cookie.credentials[ProxyAuthentication.XFF] = request.headers[ProxyAuthentication.XFF];
    }

    if (request.headers.authorization) {
      cookie.credentials.authorization = request.headers.authorization;
    }

    return cookie;
  }

  async isValidCookie(cookie) {
    return cookie.authType === this.type && cookie.username && cookie.expiryTime && cookie.credentials[this.userHeaderName];
  }

  handleUnauthedRequest(request, response, toolkit) {
    var _this$config$proxycac7;

    const loginEndpoint = (_this$config$proxycac7 = this.config.proxycache) === null || _this$config$proxycac7 === void 0 ? void 0 : _this$config$proxycac7.login_endpoint;

    if (loginEndpoint) {
      return toolkit.redirected({
        location: loginEndpoint
      });
    } else {
      return toolkit.notHandled(); // TODO: redirect to error page?
    }
  }

  buildAuthHeaderFromCookie(cookie) {
    const authHeaders = {};

    if ((0, _lodash.get)(cookie.credentials, this.userHeaderName)) {
      authHeaders[this.userHeaderName] = cookie.credentials[this.userHeaderName];

      if ((0, _lodash.get)(cookie.credentials, this.roleHeaderName)) {
        authHeaders[this.roleHeaderName] = cookie.credentials[this.roleHeaderName];
      }

      if ((0, _lodash.get)(cookie.credentials, ProxyAuthentication.XFF)) {
        authHeaders[ProxyAuthentication.XFF] = cookie.credentials[ProxyAuthentication.XFF];
      }

      return authHeaders;
    } else if ((0, _lodash.get)(cookie.credentials, 'authorization')) {
      authHeaders.authorization = (0, _lodash.get)(cookie.credentials, 'authorization');
      return authHeaders;
    }
  }

}

exports.ProxyAuthentication = ProxyAuthentication;

_defineProperty(ProxyAuthentication, "XFF", 'x-forwarded-for');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,